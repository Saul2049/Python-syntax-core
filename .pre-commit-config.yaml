# Comprehensive Pre-commit hooks for Python Trading Framework
# Focused on essential checks without problematic dependencies

repos:
  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        language_version: python3
        args: [--line-length=100]

  # Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile=black, --line-length=100]

  # Linting with ruff (faster alternative to flake8, no compilation needed)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  # Security linting
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, src/, -f, json, -o, bandit-report.json, --exit-zero]
        pass_filenames: false

  # Basic file checks (local hooks to avoid dependency issues)
  - repo: local
    hooks:
      - id: trailing-whitespace
        name: Trim Trailing Whitespace
        entry: python -c "import sys; [print(f.rstrip()) for f in sys.stdin]"
        language: system
        types: [text]
        
      - id: end-of-file-fixer
        name: Fix End of Files
        entry: python -c "import sys; content=sys.stdin.read(); sys.stdout.write(content.rstrip() + '\n' if content.strip() else '')"
        language: system
        types: [text]

      # Check for common issues
      # - id: check-docstring-first
      #   name: Check docstring is first
      #   entry: python -c "import ast, sys; [sys.exit(1) for f in sys.argv[1:] if open(f).read().strip() and not (ast.parse(open(f).read()).body and isinstance(ast.parse(open(f).read()).body[0], ast.Expr) and isinstance(ast.parse(open(f).read()).body[0].value, ast.Constant))]"
      #   language: system
      #   files: ^src/.*\.py$
        
      - id: check-requirements-txt
        name: Check requirements.txt
        entry: python -c "import sys; [print(f'âœ“ {line.strip()}') for line in open('requirements.txt') if line.strip() and not line.startswith('#')]"
        language: system
        files: requirements.*\.txt$
        pass_filenames: false

# Configuration
default_language_version:
  python: python3

# Exclude patterns
exclude: |
  (?x)^(
    \.git/|
    \.venv/|
    __pycache__/|
    \.pytest_cache/|
    \.mypy_cache/|
    build/|
    dist/|
    site/|
    output/|
    logs/|
    .*\.egg-info/|
    trades/.*\.csv|
    data/.*\.csv|
    bandit-report\.json
  )$ 