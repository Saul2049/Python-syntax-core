name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  code-quality:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'pytest>=7.4.0,<8.0.0' flake8 black isort
          pip install -r requirements.txt

      - name: Code formatting check with Black
        run: |
          black --check --diff scripts/

      - name: Import order check with isort
        run: |
          isort --check --diff scripts/

      - name: Lint with flake8
        run: |
          flake8 scripts/ --count --max-complexity=10 --max-line-length=100 --statistics --extend-ignore=E501,E402,W503,F403,F405,E722

      - name: Test with pytest
        run: |
          pytest -v

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: code-quality
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # GitHub Actions缓存工作方式需要这步额外操作
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  test-image:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy config template
        run: |
          cp scripts/config.yaml.template config.yaml

      - name: Pull image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}

      - name: Create docker-compose.test.yml
        run: |
          cat > docker-compose.test.yml << EOL
          version: '3.8'
          
          services:
            trading-system:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
              container_name: trading-system
              volumes:
                - ./config.yaml:/app/config.yaml
                - ./logs:/app/logs
              ports:
                - "9090:9090"
              environment:
                - MONITORING_PORT=9090
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:9090/metrics"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 30s
          EOL

      - name: Start container
        run: |
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait for container to be healthy
        run: |
          attempts=0
          max_attempts=10
          until [ $attempts -ge $max_attempts ]
          do
            health_status=$(docker inspect --format='{{.State.Health.Status}}' trading-system 2>/dev/null || echo "error")
            if [ "$health_status" = "healthy" ]; then
              echo "Container is healthy"
              break
            fi
            attempts=$((attempts+1))
            echo "Waiting for container to become healthy... (attempt $attempts/$max_attempts)"
            sleep 15
          done
          if [ $attempts -ge $max_attempts ]; then
            echo "Container failed to become healthy after $max_attempts attempts"
            docker-compose -f docker-compose.test.yml logs
            exit 1
          fi

      - name: Test metrics endpoint
        run: |
          curl -f http://localhost:9090/metrics || exit 1

      - name: Stop container
        run: |
          docker-compose -f docker-compose.test.yml down 